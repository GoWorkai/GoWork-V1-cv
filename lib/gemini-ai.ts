import { GoogleGenerativeAI } from "@google/generative-ai"

// Nueva API Key proporcionada
const genAI = new GoogleGenerativeAI("AIzaSyBjFUyd4Ds6MWtn8r8NOy_cgENiSNZ7MnI")

export interface GeminiResponse {
  text: string
  confidence: number
  suggestions?: string[]
  actions?: Array<{
    id: string
    label: string
    type: "link" | "action"
    url?: string
  }>
}

export interface SearchAnalysis {
  categoria: string
  subcategoria: string
  urgencia: "alta" | "media" | "baja"
  resumen: string
  sugerencias_IA: string[]
  ubicacion_sugerida?: string
  precio_estimado?: {
    min: number
    max: number
    moneda: string
  }
}

export class GeminiAI {
  private model = genAI.getGenerativeModel({ model: "gemini-1.5-pro" })
  private visionModel = genAI.getGenerativeModel({ model: "gemini-1.5-pro-vision" })

  // üü¶ Buscador Inteligente - An√°lisis de solicitudes de servicio
  async analyzeServiceRequest(
    userMessage: string,
    userContext: {
      role: "client" | "provider"
      location?: string
      previousServices?: string[]
    },
  ): Promise<SearchAnalysis> {
    try {
      const prompt = `
Eres Gow, el asistente IA de GoWork en Chile. Analiza este mensaje de un usuario y clasif√≠calo como solicitud de servicio.

CONTEXTO DEL USUARIO:
- Rol: ${userContext.role}
- Ubicaci√≥n: ${userContext.location || "Santiago, Chile"}
- Servicios anteriores: ${userContext.previousServices?.join(", ") || "Ninguno"}

MENSAJE DEL USUARIO: "${userMessage}"

INSTRUCCIONES:
1. Usa lenguaje chileno natural ("al tiro", "pega", "cachai")
2. S√© emp√°tico y directo
3. Considera el contexto local chileno

Responde SOLO con un JSON v√°lido con esta estructura exacta:
{
  "categoria": "Categor√≠a principal del servicio",
  "subcategoria": "Subcategor√≠a espec√≠fica",
  "urgencia": "alta|media|baja",
  "resumen": "Resumen claro del servicio solicitado",
  "sugerencias_IA": ["pregunta1", "pregunta2", "pregunta3"],
  "ubicacion_sugerida": "Comuna o zona sugerida",
  "precio_estimado": {
    "min": 15000,
    "max": 45000,
    "moneda": "CLP"
  }
}

CATEGOR√çAS DISPONIBLES EN GOWORK:
- Limpieza y Hogar
- Reparaciones y Mantenci√≥n
- Tecnolog√≠a y Desarrollo
- Dise√±o y Creatividad
- Educaci√≥n y Tutor√≠as
- Cuidado Personal y Salud
- Mascotas
- Transporte y Delivery
- Eventos y Entretenimiento
- Consultor√≠a y Negocios
`

      const result = await this.model.generateContent(prompt)
      const response = await result.response
      const text = response.text()

      try {
        // Limpiar la respuesta de posibles caracteres de markdown
        const cleanText = text.replace(/```json\n?|\n?```/g, "").trim()
        const parsed = JSON.parse(cleanText)
        return parsed
      } catch (parseError) {
        console.error("Error parsing Gemini JSON response:", parseError)
        return this.getFallbackSearchAnalysis(userMessage)
      }
    } catch (error) {
      console.error("Error analyzing service request:", error)
      return this.getFallbackSearchAnalysis(userMessage)
    }
  }

  // üü¢ Agente Conversacional Gow - Respuestas contextuales
  async generateGowResponse(
    userMessage: string,
    context: {
      userId: string
      role: "client" | "provider" | "admin"
      location?: string
      currentPage?: string
      chatHistory?: Array<{ role: string; message: string }>
      userProfile?: {
        name?: string
        skills?: string[]
        completeness?: number
      }
    },
  ): Promise<GeminiResponse> {
    try {
      const historyContext =
        context.chatHistory
          ?.slice(-5) // √öltimos 5 mensajes para contexto
          .map((h) => `${h.role}: ${h.message}`)
          .join("\n") || ""

      const prompt = `
Eres Gow, el asistente IA de GoWork en Chile. Tu personalidad es:
- C√°lido y emp√°tico
- Directo y eficiente  
- Usa expresiones chilenas naturales ("al tiro", "pega", "cachai", "bro")
- Siempre positivo y motivador

CONTEXTO DEL USUARIO:
- ID: ${context.userId}
- Rol: ${context.role}
- Ubicaci√≥n: ${context.location || "Chile"}
- P√°gina actual: ${context.currentPage || "dashboard"}
- Perfil completado: ${context.userProfile?.completeness || 0}%
- Habilidades: ${context.userProfile?.skills?.join(", ") || "No especificadas"}

HISTORIAL RECIENTE:
${historyContext}

MENSAJE ACTUAL: "${userMessage}"

FUNCIONES QUE PUEDES AYUDAR:
- Crear y optimizar perfiles
- Armar cotizaciones y presupuestos
- Recordar plazos de entrega
- Ayudar en respuestas a clientes
- Sugerir servicios seg√∫n ubicaci√≥n
- Estimar precios del mercado chileno

Responde de manera natural y √∫til. Si necesitas hacer una acci√≥n espec√≠fica, incl√∫yela en tu respuesta.
M√°ximo 200 palabras.
`

      const result = await this.model.generateContent(prompt)
      const response = await result.response
      const text = response.text()

      // Analizar la respuesta para extraer acciones sugeridas
      const actions = this.extractActionsFromResponse(text, context)
      const suggestions = this.generateContextualSuggestions(userMessage, context)

      return {
        text: text.trim(),
        confidence: this.calculateConfidence(text, userMessage, context),
        suggestions,
        actions,
      }
    } catch (error) {
      console.error("Error generating Gow response:", error)
      return this.getFallbackGowResponse(userMessage, context)
    }
  }

  // üß© Asistencia contextual por m√≥dulo
  async generateModuleAssistance(
    module: "registro" | "perfil" | "servicios" | "chat" | "calendario" | "pagos",
    userContext: {
      role: "client" | "provider"
      location?: string
      currentData?: any
    },
  ): Promise<{
    suggestions: string[]
    autoText?: string
    tips: string[]
  }> {
    try {
      const modulePrompts = {
        registro: `Ayuda al usuario a completar su registro en GoWork. Sugiere informaci√≥n relevante para su perfil seg√∫n su ubicaci√≥n en ${userContext.location || "Chile"}.`,
        perfil: `Analiza el perfil actual y sugiere mejoras. Recomienda habilidades populares en ${userContext.location || "Chile"} para un ${userContext.role}.`,
        servicios: `Ayuda a crear descripciones de servicios atractivas y estimar precios competitivos para el mercado chileno.`,
        chat: `Sugiere respuestas profesionales y amigables para la comunicaci√≥n entre cliente y proveedor.`,
        calendario: `Recomienda horarios √≥ptimos seg√∫n la demanda local y tipo de servicio.`,
        pagos: `Estima tarifas justas seg√∫n el mercado local y experiencia del proveedor.`,
      }

      const prompt = `
Eres Gow, asistente de GoWork. El usuario est√° en el m√≥dulo "${module}".
${modulePrompts[module]}

Usuario: ${userContext.role} en ${userContext.location || "Chile"}
Datos actuales: ${JSON.stringify(userContext.currentData || {})}

Responde con JSON:
{
  "suggestions": ["sugerencia1", "sugerencia2", "sugerencia3"],
  "autoText": "Texto generado autom√°ticamente si aplica",
  "tips": ["tip1", "tip2", "tip3"]
}

Usa lenguaje chileno natural y s√© espec√≠fico para el contexto local.
`

      const result = await this.model.generateContent(prompt)
      const response = await result.response
      const text = response.text()

      try {
        const cleanText = text.replace(/```json\n?|\n?```/g, "").trim()
        return JSON.parse(cleanText)
      } catch (parseError) {
        return this.getFallbackModuleAssistance(module)
      }
    } catch (error) {
      console.error("Error generating module assistance:", error)
      return this.getFallbackModuleAssistance(module)
    }
  }

  // M√©todos auxiliares privados
  private getFallbackSearchAnalysis(userMessage: string): SearchAnalysis {
    return {
      categoria: "Servicios Generales",
      subcategoria: "Consulta general",
      urgencia: "media",
      resumen: `Solicitud de servicio: ${userMessage.slice(0, 100)}...`,
      sugerencias_IA: [
        "¬øPodr√≠as ser m√°s espec√≠fico sobre lo que necesitas?",
        "¬øEn qu√© comuna te encuentras?",
        "¬øCu√°ndo necesitas el servicio?",
      ],
      ubicacion_sugerida: "Santiago Centro",
      precio_estimado: {
        min: 20000,
        max: 50000,
        moneda: "CLP",
      },
    }
  }

  private getFallbackGowResponse(userMessage: string, context: any): GeminiResponse {
    const responses = [
      "¬°Hola! Soy Gow, tu asistente en GoWork. ¬øEn qu√© te puedo ayudar al tiro?",
      "¬°Qu√© tal! Estoy aqu√≠ para echarte una mano con lo que necesites en GoWork.",
      "¬°Hola, bro! Cu√©ntame qu√© necesitas y te ayudo al tiro.",
    ]

    return {
      text: responses[Math.floor(Math.random() * responses.length)],
      confidence: 75,
      suggestions: ["¬øC√≥mo optimizo mi perfil?", "¬øQu√© servicios puedo ofrecer?", "¬øC√≥mo encuentro buenos proyectos?"],
      actions: [
        { id: "profile", label: "üë§ Optimizar perfil", type: "link", url: "/dashboard" },
        { id: "services", label: "üîç Buscar servicios", type: "link", url: "/servicios" },
      ],
    }
  }

  private getFallbackModuleAssistance(module: string) {
    return {
      suggestions: [
        "Completa toda la informaci√≥n requerida",
        "Usa palabras clave relevantes",
        "Mant√©n tu informaci√≥n actualizada",
      ],
      autoText: "Texto de ejemplo para el m√≥dulo " + module,
      tips: [
        "Tip 1: S√© espec√≠fico en tus descripciones",
        "Tip 2: Usa fotos de calidad",
        "Tip 3: Responde r√°pido a los mensajes",
      ],
    }
  }

  private extractActionsFromResponse(
    text: string,
    context: any,
  ): Array<{
    id: string
    label: string
    type: "link" | "action"
    url?: string
  }> {
    const actions = []
    const lowerText = text.toLowerCase()

    if (lowerText.includes("perfil") || lowerText.includes("optimizar")) {
      actions.push({ id: "optimize-profile", label: "üöÄ Optimizar perfil", type: "link", url: "/dashboard" })
    }
    if (lowerText.includes("servicio") || lowerText.includes("buscar")) {
      actions.push({ id: "find-services", label: "üîç Buscar servicios", type: "link", url: "/servicios" })
    }
    if (lowerText.includes("precio") || lowerText.includes("cotizar")) {
      actions.push({ id: "estimate-price", label: "üí∞ Estimar precios", type: "action" })
    }

    return actions.slice(0, 3)
  }

  private generateContextualSuggestions(userMessage: string, context: any): string[] {
    const suggestions = []
    const role = context.role

    if (role === "provider") {
      suggestions.push(
        "¬øC√≥mo optimizo mi perfil para m√°s clientes?",
        "¬øQu√© precios debo cobrar?",
        "¬øC√≥mo respondo a una propuesta?",
      )
    } else {
      suggestions.push(
        "¬øC√≥mo encuentro el mejor proveedor?",
        "¬øQu√© debo preguntar antes de contratar?",
        "¬øC√≥mo funciona el pago?",
      )
    }

    return suggestions.slice(0, 3)
  }

  private calculateConfidence(text: string, userMessage: string, context: any): number {
    let confidence = 85

    if (text.length > 50) confidence += 5
    if (text.includes("GoWork")) confidence += 5
    if (context.userProfile?.completeness > 70) confidence += 5

    return Math.min(confidence, 98)
  }

  // M√©todo para verificar conexi√≥n
  async testConnection(): Promise<boolean> {
    try {
      const result = await this.model.generateContent("Hola, ¬øfunciona la conexi√≥n?")
      const response = await result.response
      return response.text().length > 0
    } catch (error) {
      console.error("Gemini connection test failed:", error)
      return false
    }
  }
}

export const geminiAI = new GeminiAI()
