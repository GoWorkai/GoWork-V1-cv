import { GoogleGenerativeAI } from "@google/generative-ai"

const genAI = new GoogleGenerativeAI("AIzaSyDBRyQ0TwOBhqjN5sFv0f3jSHp322jlNs4")

export interface GeminiResponse {
  text: string
  confidence: number
  suggestions?: string[]
  actions?: Array<{
    id: string
    label: string
    type: "link" | "action"
    url?: string
  }>
}

export class GeminiAI {
  private model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" })

  async generateResponse(
    userMessage: string,
    context: {
      userType?: "client" | "provider"
      currentPage?: string
      userLocation?: string
      previousMessages?: string[]
    } = {},
  ): Promise<GeminiResponse> {
    try {
      // Construir el prompt contextual para GoWork
      const systemPrompt = `
Eres el asistente de IA de GoWork, una plataforma que conecta talentos con clientes para servicios profesionales.

CONTEXTO DE GOWORK:
- Plataforma de servicios bajo demanda
- Conecta freelancers/proveedores con clientes
- Servicios: desarrollo web, dise√±o, marketing, consultor√≠a, oficios, etc.
- Ubicaci√≥n: Principalmente Chile y Latinoam√©rica
- Misi√≥n: "Conectar talentos con necesidades reales"

INFORMACI√ìN DEL USUARIO:
- Tipo: ${context.userType || "no especificado"}
- P√°gina actual: ${context.currentPage || "no especificada"}
- Ubicaci√≥n: ${context.userLocation || "no especificada"}

INSTRUCCIONES:
1. Responde de manera amigable y profesional
2. Usa informaci√≥n espec√≠fica de GoWork
3. Ofrece acciones concretas cuando sea posible
4. Mant√©n respuestas concisas pero √∫tiles (m√°ximo 150 palabras)
5. Incluye emojis apropiados para hacer la conversaci√≥n m√°s amigable
6. Si preguntan por precios, da rangos realistas para el mercado chileno/latinoamericano

TIPOS DE CONSULTAS COMUNES:
- C√≥mo encontrar servicios/proveedores
- Precios y presupuestos
- Proceso de contrataci√≥n
- Dudas sobre la plataforma
- Problemas t√©cnicos
- Recomendaciones personalizadas

Responde al siguiente mensaje del usuario de manera √∫til y contextual:
`

      const fullPrompt = `${systemPrompt}\n\nUsuario: ${userMessage}`

      const result = await this.model.generateContent(fullPrompt)
      const response = await result.response
      const text = response.text()

      // Analizar la respuesta para extraer acciones sugeridas
      const actions = this.extractActions(text, userMessage, context)
      const suggestions = this.generateSuggestions(userMessage, context)

      return {
        text: text.trim(),
        confidence: this.calculateConfidence(text, userMessage),
        suggestions,
        actions,
      }
    } catch (error) {
      console.error("Error calling Gemini AI:", error)

      // Fallback response m√°s espec√≠fico seg√∫n el tipo de error
      let fallbackMessage = "Disculpa, estoy teniendo problemas t√©cnicos en este momento. ü§ñ"

      if (error instanceof Error) {
        if (error.message.includes("quota")) {
          fallbackMessage = "He alcanzado mi l√≠mite de consultas por el momento. ¬øPuedes intentar en unos minutos? üïê"
        } else if (error.message.includes("network")) {
          fallbackMessage = "Problemas de conexi√≥n. ¬øPuedes verificar tu internet e intentar de nuevo? üåê"
        }
      }

      return {
        text: `${fallbackMessage} Mientras tanto, puedes explorar nuestros servicios en el mapa o contactar directamente con proveedores.`,
        confidence: 50,
        actions: [
          { id: "map", label: "üó∫Ô∏è Ver mapa de servicios", type: "link", url: "/map" },
          { id: "services", label: "üîç Explorar servicios", type: "link", url: "/servicios" },
          { id: "dashboard", label: "üë§ Mi dashboard", type: "link", url: "/dashboard" },
        ],
      }
    }
  }

  private extractActions(
    response: string,
    userMessage: string,
    context: any,
  ): Array<{ id: string; label: string; type: "link" | "action"; url?: string }> {
    const actions = []
    const lowerResponse = response.toLowerCase()
    const lowerMessage = userMessage.toLowerCase()

    // Acciones basadas en el contenido de la respuesta y mensaje
    if (lowerMessage.includes("servicio") || lowerMessage.includes("trabajo") || lowerMessage.includes("proveedor")) {
      actions.push(
        { id: "services", label: "üîç Ver servicios", type: "link", url: "/servicios" },
        { id: "map", label: "üó∫Ô∏è Buscar en mapa", type: "link", url: "/map" },
      )
    }

    if (lowerMessage.includes("precio") || lowerMessage.includes("costo") || lowerMessage.includes("presupuesto")) {
      actions.push(
        { id: "calculator", label: "üí∞ Calculadora de precios", type: "link", url: "/ai-dashboard" },
        { id: "compare", label: "üìä Comparar precios", type: "link", url: "/servicios" },
      )
    }

    if (lowerMessage.includes("como") || lowerMessage.includes("c√≥mo") || lowerMessage.includes("ayuda")) {
      actions.push(
        { id: "guide", label: "üìö Gu√≠a completa", type: "link", url: "/onboarding" },
        { id: "ai-help", label: "ü§ñ Centro de IA", type: "link", url: "/ai-dashboard" },
      )
    }

    if (lowerMessage.includes("chat") || lowerMessage.includes("contactar") || lowerMessage.includes("hablar")) {
      actions.push({ id: "chat", label: "üí¨ Ir al chat", type: "link", url: "/chat" })
    }

    if (lowerMessage.includes("perfil") || lowerMessage.includes("cuenta") || lowerMessage.includes("registro")) {
      actions.push(
        { id: "profile", label: "üë§ Mi perfil", type: "link", url: "/dashboard" },
        { id: "onboarding", label: "üöÄ Completar perfil", type: "link", url: "/onboarding" },
      )
    }

    // Acciones por defecto si no hay espec√≠ficas
    if (actions.length === 0) {
      actions.push(
        { id: "explore", label: "üåü Explorar GoWork", type: "link", url: "/servicios" },
        { id: "ai-center", label: "üß† Centro de IA", type: "link", url: "/ai-dashboard" },
      )
    }

    return actions.slice(0, 3) // M√°ximo 3 acciones
  }

  private generateSuggestions(userMessage: string, context: any): string[] {
    const suggestions = []
    const lowerMessage = userMessage.toLowerCase()

    if (lowerMessage.includes("desarrollador") || lowerMessage.includes("programador")) {
      suggestions.push(
        "¬øBuscas desarrollo web o m√≥vil?",
        "¬øQu√© tecnolog√≠as necesitas?",
        "¬øCu√°l es tu presupuesto aproximado?",
      )
    } else if (lowerMessage.includes("dise√±o") || lowerMessage.includes("dise√±ador")) {
      suggestions.push(
        "¬øNecesitas dise√±o web o gr√°fico?",
        "¬øTienes referencias visuales?",
        "¬øPara qu√© tipo de proyecto?",
      )
    } else if (lowerMessage.includes("marketing")) {
      suggestions.push(
        "¬øMarketing digital o tradicional?",
        "¬øQu√© redes sociales usas?",
        "¬øCu√°l es tu p√∫blico objetivo?",
      )
    } else {
      suggestions.push(
        "¬øQu√© tipo de servicio necesitas?",
        "¬øEn qu√© ciudad te encuentras?",
        "¬øCu√°ndo necesitas el servicio?",
      )
    }

    return suggestions.slice(0, 3)
  }

  private calculateConfidence(response: string, userMessage: string): number {
    // Calcular confianza basada en la longitud y relevancia de la respuesta
    let confidence = 85

    if (response.length > 100) confidence += 5
    if (response.length > 200) confidence += 5
    if (response.includes("GoWork")) confidence += 5
    if (response.includes("servicio") || response.includes("proveedor")) confidence += 5

    return Math.min(confidence, 98)
  }

  async generateSearchSuggestions(query: string): Promise<{
    suggestions: Array<{
      id: string
      type: "service" | "provider" | "action" | "help"
      title: string
      description: string
      confidence: number
      category: string
    }>
    insights: Array<{
      id: string
      message: string
      type: "tip" | "recommendation" | "trend"
      confidence: number
    }>
  }> {
    try {
      const prompt = `
Analiza esta b√∫squeda de GoWork: "${query}"

Responde SOLO con un JSON v√°lido (sin markdown ni explicaciones) con esta estructura exacta:
{
  "suggestions": [
    {
      "id": "unique-id",
      "type": "service",
      "title": "T√≠tulo corto",
      "description": "Descripci√≥n √∫til",
      "confidence": 90,
      "category": "Categor√≠a"
    }
  ],
  "insights": [
    {
      "id": "insight-id", 
      "message": "Insight √∫til con emoji",
      "type": "tip",
      "confidence": 85
    }
  ]
}

Genera 4 sugerencias y 2 insights relevantes para servicios de GoWork.
`

      const result = await this.model.generateContent(prompt)
      const response = await result.response
      const text = response.text()

      try {
        // Limpiar la respuesta de posibles caracteres de markdown
        const cleanText = text.replace(/```json\n?|\n?```/g, "").trim()
        const parsed = JSON.parse(cleanText)
        return parsed
      } catch (parseError) {
        console.error("Error parsing Gemini JSON response:", parseError)
        return this.getFallbackSearchSuggestions(query)
      }
    } catch (error) {
      console.error("Error generating search suggestions:", error)
      return this.getFallbackSearchSuggestions(query)
    }
  }

  private getFallbackSearchSuggestions(query: string) {
    const lowerQuery = query.toLowerCase()

    const suggestions = [
      {
        id: "dev-web",
        type: "service" as const,
        title: "Desarrollo Web",
        description: "Encuentra desarrolladores web especializados",
        confidence: 92,
        category: "Tecnolog√≠a",
      },
      {
        id: "design-ui",
        type: "service" as const,
        title: "Dise√±o UI/UX",
        description: "Dise√±adores expertos en experiencia de usuario",
        confidence: 89,
        category: "Dise√±o",
      },
      {
        id: "marketing",
        type: "service" as const,
        title: "Marketing Digital",
        description: "Especialistas en marketing y publicidad",
        confidence: 87,
        category: "Marketing",
      },
      {
        id: "consulting",
        type: "service" as const,
        title: "Consultor√≠a",
        description: "Expertos en estrategia y optimizaci√≥n",
        confidence: 85,
        category: "Negocios",
      },
    ]

    // Personalizar sugerencias seg√∫n la consulta
    if (lowerQuery.includes("desarrollo") || lowerQuery.includes("programar")) {
      suggestions[0].confidence = 95
      suggestions[0].title = "Desarrollo de Software"
      suggestions[0].description = "Desarrolladores especializados en tu tecnolog√≠a"
    }

    if (lowerQuery.includes("dise√±o")) {
      suggestions[1].confidence = 95
      suggestions[1].title = "Dise√±o Profesional"
      suggestions[1].description = "Dise√±adores creativos para tu proyecto"
    }

    return {
      suggestions: suggestions.slice(0, 4),
      insights: [
        {
          id: "trend-1",
          message: "üî• Los servicios de IA est√°n en alta demanda esta semana",
          type: "trend" as const,
          confidence: 91,
        },
        {
          id: "tip-1",
          message: "üí° Tip: Revisa las rese√±as antes de contratar un servicio",
          type: "tip" as const,
          confidence: 88,
        },
      ],
    }
  }

  // M√©todo para verificar si la API est√° funcionando
  async testConnection(): Promise<boolean> {
    try {
      const result = await this.model.generateContent("Hola, ¬øfunciona la conexi√≥n?")
      const response = await result.response
      return response.text().length > 0
    } catch (error) {
      console.error("Gemini connection test failed:", error)
      return false
    }
  }
}

export const geminiAI = new GeminiAI()
